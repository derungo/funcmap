## PROJECT OVERVIEW
- This project integrates the **FuncMap extension** into Cursor Composer to handle function introspection and relationships.
- A global object, `global.funcmapForComposer`, is available for all function registry operations.

## EXTENSION USAGE
- **Always prefer using FuncMap** for function lookups or searches:
  - `getFunctionData(functionName)` for detailed info about a function
  - `findDependentFunctions(functionName)` for who depends on that function
  - `findRelatedFunctions(moduleName)` for module relationships
  - `findFunctionsByExecToken(token)` to filter by execution token
  - `searchFunctions(query)` for keyword-based searches
  - `getAllFunctions()` to list everything
- **Do not** manually scan or open files one by one to find functions â€“ use FuncMap methods instead.
- Verify readiness via `isReady()` if needed.

## BEST PRACTICES
- **Tag Functions**:
  - Use `@ai-link name=MyFunction`  
  - Use `@ai-depends on=OtherFunction`  
  - Use `@ai-related SomeModule`  
  - Use `@ai-exec myContext`  
- **Use Clear Names** for functions and modules to improve semantic searches.
- **Maintain Dependencies**: Keep `@ai-depends` updated so that `findDependentFunctions` remains accurate.
- **Group Related Functions** with `@ai-related` to quickly discover relevant code pieces.

## RULES CONFIGURATION (JSON Example)
```json
{
  "version": 1,
  "name": "FuncMap Integration",
  "description": "Configuration for FuncMap integration",
  "settings": {
    "funcmap.watchFiles": true,
    "funcmap.filePatterns": ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx"],
    "funcmap.storageType": "json"
  },
  "rules": [
    {
      "name": "PreferFuncMapSearch",
      "description": "Use FuncMap's registry over standard search",
      "priority": "high",
      "when": "global.funcmapForComposer !== undefined",
      "do": [
        {
          "action": "use_funcmap_search",
          "description": "Use FuncMap's search capabilities",
          "steps": [
            "Check function existence with getFunctionData",
            "Use searchFunctions for semantic search",
            "Explore dependencies with findDependentFunctions",
            "Find related modules using findRelatedFunctions",
            "Search by exec token using findFunctionsByExecToken"
          ]
        }
      ]
    }
  ]
}
